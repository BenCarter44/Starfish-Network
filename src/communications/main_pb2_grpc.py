# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import main_pb2 as main__pb2

GRPC_GENERATED_VERSION = "1.68.1"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in main_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class DHTServiceStub(object):
    """/////////////////////////////////////////"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FetchItem = channel.unary_unary(
            "/protocol.DHTService/FetchItem",
            request_serializer=main__pb2.DHT_Fetch_Request.SerializeToString,
            response_deserializer=main__pb2.DHT_Fetch_Response.FromString,
            _registered_method=True,
        )
        self.StoreItem = channel.unary_unary(
            "/protocol.DHTService/StoreItem",
            request_serializer=main__pb2.DHT_Store_Request.SerializeToString,
            response_deserializer=main__pb2.DHT_Store_Response.FromString,
            _registered_method=True,
        )
        self.DeleteItem = channel.unary_unary(
            "/protocol.DHTService/DeleteItem",
            request_serializer=main__pb2.DHT_Delete_Request.SerializeToString,
            response_deserializer=main__pb2.DHT_Delete_Response.FromString,
            _registered_method=True,
        )
        self.DeletedNotice = channel.unary_unary(
            "/protocol.DHTService/DeletedNotice",
            request_serializer=main__pb2.DHT_Delete_Notice_Request.SerializeToString,
            response_deserializer=main__pb2.DHT_Delete_Response.FromString,
            _registered_method=True,
        )
        self.UpdateItem = channel.unary_unary(
            "/protocol.DHTService/UpdateItem",
            request_serializer=main__pb2.DHT_Update_Request.SerializeToString,
            response_deserializer=main__pb2.DHT_Update_Response.FromString,
            _registered_method=True,
        )
        self.UpdatedNotice = channel.unary_unary(
            "/protocol.DHTService/UpdatedNotice",
            request_serializer=main__pb2.DHT_Update_Notice_Request.SerializeToString,
            response_deserializer=main__pb2.DHT_Update_Notice_Response.FromString,
            _registered_method=True,
        )
        self.RegisterNotice = channel.unary_unary(
            "/protocol.DHTService/RegisterNotice",
            request_serializer=main__pb2.DHT_Register_Notices_Request.SerializeToString,
            response_deserializer=main__pb2.DHT_Register_Notices_Response.FromString,
            _registered_method=True,
        )


class DHTServiceServicer(object):
    """/////////////////////////////////////////"""

    def FetchItem(self, request, context):
        """Fetch item from DHT"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def StoreItem(self, request, context):
        """Store item from DHT"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteItem(self, request, context):
        """Delete item from DHT"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeletedNotice(self, request, context):
        """Deleted notice from DHT"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateItem(self, request, context):
        """Update item from DHT"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdatedNotice(self, request, context):
        """Update notice form DHT"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RegisterNotice(self, request, context):
        """Register notice from DHT"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DHTServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "FetchItem": grpc.unary_unary_rpc_method_handler(
            servicer.FetchItem,
            request_deserializer=main__pb2.DHT_Fetch_Request.FromString,
            response_serializer=main__pb2.DHT_Fetch_Response.SerializeToString,
        ),
        "StoreItem": grpc.unary_unary_rpc_method_handler(
            servicer.StoreItem,
            request_deserializer=main__pb2.DHT_Store_Request.FromString,
            response_serializer=main__pb2.DHT_Store_Response.SerializeToString,
        ),
        "DeleteItem": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteItem,
            request_deserializer=main__pb2.DHT_Delete_Request.FromString,
            response_serializer=main__pb2.DHT_Delete_Response.SerializeToString,
        ),
        "DeletedNotice": grpc.unary_unary_rpc_method_handler(
            servicer.DeletedNotice,
            request_deserializer=main__pb2.DHT_Delete_Notice_Request.FromString,
            response_serializer=main__pb2.DHT_Delete_Response.SerializeToString,
        ),
        "UpdateItem": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateItem,
            request_deserializer=main__pb2.DHT_Update_Request.FromString,
            response_serializer=main__pb2.DHT_Update_Response.SerializeToString,
        ),
        "UpdatedNotice": grpc.unary_unary_rpc_method_handler(
            servicer.UpdatedNotice,
            request_deserializer=main__pb2.DHT_Update_Notice_Request.FromString,
            response_serializer=main__pb2.DHT_Update_Notice_Response.SerializeToString,
        ),
        "RegisterNotice": grpc.unary_unary_rpc_method_handler(
            servicer.RegisterNotice,
            request_deserializer=main__pb2.DHT_Register_Notices_Request.FromString,
            response_serializer=main__pb2.DHT_Register_Notices_Response.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "protocol.DHTService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("protocol.DHTService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class DHTService(object):
    """/////////////////////////////////////////"""

    @staticmethod
    def FetchItem(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.DHTService/FetchItem",
            main__pb2.DHT_Fetch_Request.SerializeToString,
            main__pb2.DHT_Fetch_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def StoreItem(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.DHTService/StoreItem",
            main__pb2.DHT_Store_Request.SerializeToString,
            main__pb2.DHT_Store_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteItem(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.DHTService/DeleteItem",
            main__pb2.DHT_Delete_Request.SerializeToString,
            main__pb2.DHT_Delete_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeletedNotice(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.DHTService/DeletedNotice",
            main__pb2.DHT_Delete_Notice_Request.SerializeToString,
            main__pb2.DHT_Delete_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdateItem(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.DHTService/UpdateItem",
            main__pb2.DHT_Update_Request.SerializeToString,
            main__pb2.DHT_Update_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def UpdatedNotice(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.DHTService/UpdatedNotice",
            main__pb2.DHT_Update_Notice_Request.SerializeToString,
            main__pb2.DHT_Update_Notice_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RegisterNotice(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.DHTService/RegisterNotice",
            main__pb2.DHT_Register_Notices_Request.SerializeToString,
            main__pb2.DHT_Register_Notices_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class TaskServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendEvent = channel.unary_unary(
            "/protocol.TaskService/SendEvent",
            request_serializer=main__pb2.SendEvent_Request.SerializeToString,
            response_deserializer=main__pb2.SendEvent_Response.FromString,
            _registered_method=True,
        )
        self.SendMonitorRequest = channel.unary_unary(
            "/protocol.TaskService/SendMonitorRequest",
            request_serializer=main__pb2.SendMonitor_Request.SerializeToString,
            response_deserializer=main__pb2.SendMonitor_Response.FromString,
            _registered_method=True,
        )
        self.SendCheckpoint = channel.unary_unary(
            "/protocol.TaskService/SendCheckpoint",
            request_serializer=main__pb2.SendCheckpoint_Request.SerializeToString,
            response_deserializer=main__pb2.SendCheckpoint_Response.FromString,
            _registered_method=True,
        )


class TaskServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendEvent(self, request, context):
        """Create Task
        rpc AllocateTask(TaskAllocate_Request) returns (TaskAllocate_Response) {}

        Send Event
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendMonitorRequest(self, request, context):
        """Request Process Monitor"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendCheckpoint(self, request, context):
        """Send checkpoint"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_TaskServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SendEvent": grpc.unary_unary_rpc_method_handler(
            servicer.SendEvent,
            request_deserializer=main__pb2.SendEvent_Request.FromString,
            response_serializer=main__pb2.SendEvent_Response.SerializeToString,
        ),
        "SendMonitorRequest": grpc.unary_unary_rpc_method_handler(
            servicer.SendMonitorRequest,
            request_deserializer=main__pb2.SendMonitor_Request.FromString,
            response_serializer=main__pb2.SendMonitor_Response.SerializeToString,
        ),
        "SendCheckpoint": grpc.unary_unary_rpc_method_handler(
            servicer.SendCheckpoint,
            request_deserializer=main__pb2.SendCheckpoint_Request.FromString,
            response_serializer=main__pb2.SendCheckpoint_Response.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "protocol.TaskService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("protocol.TaskService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class TaskService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendEvent(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.TaskService/SendEvent",
            main__pb2.SendEvent_Request.SerializeToString,
            main__pb2.SendEvent_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SendMonitorRequest(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.TaskService/SendMonitorRequest",
            main__pb2.SendMonitor_Request.SerializeToString,
            main__pb2.SendMonitor_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SendCheckpoint(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.TaskService/SendCheckpoint",
            main__pb2.SendCheckpoint_Request.SerializeToString,
            main__pb2.SendCheckpoint_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class PeerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Bootstrap = channel.unary_unary(
            "/protocol.PeerService/Bootstrap",
            request_serializer=main__pb2.Bootstrap_Request.SerializeToString,
            response_deserializer=main__pb2.Bootstrap_Response.FromString,
            _registered_method=True,
        )


class PeerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Bootstrap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_PeerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Bootstrap": grpc.unary_unary_rpc_method_handler(
            servicer.Bootstrap,
            request_deserializer=main__pb2.Bootstrap_Request.FromString,
            response_serializer=main__pb2.Bootstrap_Response.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "protocol.PeerService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("protocol.PeerService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class PeerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Bootstrap(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.PeerService/Bootstrap",
            main__pb2.Bootstrap_Request.SerializeToString,
            main__pb2.Bootstrap_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class KeepAliveServiceStub(object):
    """////////////////////////

    Keep Alive Manager

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendPing = channel.unary_unary(
            "/protocol.KeepAliveService/SendPing",
            request_serializer=main__pb2.PING.SerializeToString,
            response_deserializer=main__pb2.PONG.FromString,
            _registered_method=True,
        )
        self.SendHeartbeat = channel.unary_unary(
            "/protocol.KeepAliveService/SendHeartbeat",
            request_serializer=main__pb2.Heartbeat_Request.SerializeToString,
            response_deserializer=main__pb2.Heartbeat_Response.FromString,
            _registered_method=True,
        )


class KeepAliveServiceServicer(object):
    """////////////////////////

    Keep Alive Manager

    """

    def SendPing(self, request, context):
        """PingPong - Is alive?"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SendHeartbeat(self, request, context):
        """KeepAlive"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_KeepAliveServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SendPing": grpc.unary_unary_rpc_method_handler(
            servicer.SendPing,
            request_deserializer=main__pb2.PING.FromString,
            response_serializer=main__pb2.PONG.SerializeToString,
        ),
        "SendHeartbeat": grpc.unary_unary_rpc_method_handler(
            servicer.SendHeartbeat,
            request_deserializer=main__pb2.Heartbeat_Request.FromString,
            response_serializer=main__pb2.Heartbeat_Response.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "protocol.KeepAliveService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "protocol.KeepAliveService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class KeepAliveService(object):
    """////////////////////////

    Keep Alive Manager

    """

    @staticmethod
    def SendPing(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.KeepAliveService/SendPing",
            main__pb2.PING.SerializeToString,
            main__pb2.PONG.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SendHeartbeat(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.KeepAliveService/SendHeartbeat",
            main__pb2.Heartbeat_Request.SerializeToString,
            main__pb2.Heartbeat_Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class FileServiceStub(object):
    """////////////////////////"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateFile = channel.unary_unary(
            "/protocol.FileService/CreateFile",
            request_serializer=main__pb2.FileServiceRequest.SerializeToString,
            response_deserializer=main__pb2.FileServiceResponse.FromString,
            _registered_method=True,
        )
        self.OpenFile = channel.unary_unary(
            "/protocol.FileService/OpenFile",
            request_serializer=main__pb2.FileServiceRequest.SerializeToString,
            response_deserializer=main__pb2.FileServiceResponse.FromString,
            _registered_method=True,
        )
        self.ReadFile = channel.unary_unary(
            "/protocol.FileService/ReadFile",
            request_serializer=main__pb2.FileServiceRequest.SerializeToString,
            response_deserializer=main__pb2.FileServiceResponse.FromString,
            _registered_method=True,
        )
        self.WriteFile = channel.unary_unary(
            "/protocol.FileService/WriteFile",
            request_serializer=main__pb2.FileServiceRequest.SerializeToString,
            response_deserializer=main__pb2.FileServiceResponse.FromString,
            _registered_method=True,
        )
        self.SeekFile = channel.unary_unary(
            "/protocol.FileService/SeekFile",
            request_serializer=main__pb2.FileServiceRequest.SerializeToString,
            response_deserializer=main__pb2.FileServiceResponse.FromString,
            _registered_method=True,
        )
        self.TellFile = channel.unary_unary(
            "/protocol.FileService/TellFile",
            request_serializer=main__pb2.FileServiceRequest.SerializeToString,
            response_deserializer=main__pb2.FileServiceResponse.FromString,
            _registered_method=True,
        )
        self.CloseFile = channel.unary_unary(
            "/protocol.FileService/CloseFile",
            request_serializer=main__pb2.FileServiceRequest.SerializeToString,
            response_deserializer=main__pb2.FileServiceResponse.FromString,
            _registered_method=True,
        )


class FileServiceServicer(object):
    """////////////////////////"""

    def CreateFile(self, request, context):
        """create file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OpenFile(self, request, context):
        """open file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReadFile(self, request, context):
        """read from file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def WriteFile(self, request, context):
        """write to file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SeekFile(self, request, context):
        """seek file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TellFile(self, request, context):
        """seek file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CloseFile(self, request, context):
        """close file"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_FileServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "CreateFile": grpc.unary_unary_rpc_method_handler(
            servicer.CreateFile,
            request_deserializer=main__pb2.FileServiceRequest.FromString,
            response_serializer=main__pb2.FileServiceResponse.SerializeToString,
        ),
        "OpenFile": grpc.unary_unary_rpc_method_handler(
            servicer.OpenFile,
            request_deserializer=main__pb2.FileServiceRequest.FromString,
            response_serializer=main__pb2.FileServiceResponse.SerializeToString,
        ),
        "ReadFile": grpc.unary_unary_rpc_method_handler(
            servicer.ReadFile,
            request_deserializer=main__pb2.FileServiceRequest.FromString,
            response_serializer=main__pb2.FileServiceResponse.SerializeToString,
        ),
        "WriteFile": grpc.unary_unary_rpc_method_handler(
            servicer.WriteFile,
            request_deserializer=main__pb2.FileServiceRequest.FromString,
            response_serializer=main__pb2.FileServiceResponse.SerializeToString,
        ),
        "SeekFile": grpc.unary_unary_rpc_method_handler(
            servicer.SeekFile,
            request_deserializer=main__pb2.FileServiceRequest.FromString,
            response_serializer=main__pb2.FileServiceResponse.SerializeToString,
        ),
        "TellFile": grpc.unary_unary_rpc_method_handler(
            servicer.TellFile,
            request_deserializer=main__pb2.FileServiceRequest.FromString,
            response_serializer=main__pb2.FileServiceResponse.SerializeToString,
        ),
        "CloseFile": grpc.unary_unary_rpc_method_handler(
            servicer.CloseFile,
            request_deserializer=main__pb2.FileServiceRequest.FromString,
            response_serializer=main__pb2.FileServiceResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "protocol.FileService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("protocol.FileService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.
class FileService(object):
    """////////////////////////"""

    @staticmethod
    def CreateFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.FileService/CreateFile",
            main__pb2.FileServiceRequest.SerializeToString,
            main__pb2.FileServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def OpenFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.FileService/OpenFile",
            main__pb2.FileServiceRequest.SerializeToString,
            main__pb2.FileServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReadFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.FileService/ReadFile",
            main__pb2.FileServiceRequest.SerializeToString,
            main__pb2.FileServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def WriteFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.FileService/WriteFile",
            main__pb2.FileServiceRequest.SerializeToString,
            main__pb2.FileServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SeekFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.FileService/SeekFile",
            main__pb2.FileServiceRequest.SerializeToString,
            main__pb2.FileServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def TellFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.FileService/TellFile",
            main__pb2.FileServiceRequest.SerializeToString,
            main__pb2.FileServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def CloseFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/protocol.FileService/CloseFile",
            main__pb2.FileServiceRequest.SerializeToString,
            main__pb2.FileServiceResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
